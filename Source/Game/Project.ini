; MicroBuild
; Copyright (C) 2016 TwinDrills
; 
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

[MicroBuild]
RequiredVersion=0.1

[Project]
Name=Game
Group=Core
if (Target.Configuration==Master)
{
	OutputType=Executable
}
else
{
	OutputType=ConsoleApp
}

if (Target.Configuration==MasterDedicated)
{
	OutputName=Server
}
else
{
	OutputName=$(Name)
}
OutputExtension=$(Host.ExeExtension)

if (Host.Platform==Linux)
{
	OutputDirectory=$(ZombieGrinder.BinaryDirectory)/Linux32/
}
else if (Host.Platform==MacOS)
{
	OutputDirectory=$(ZombieGrinder.BinaryDirectory)/MacOS/ZombieGrinder.app/Contents/MacOS/
}
else if (Host.Platform==Windows)
{
	OutputDirectory=$(ZombieGrinder.BinaryDirectory)/Win32/
}

Language=Cpp
LanguageVersion=Cpp_11
RootNamespace=ZombieGrinder

[Dependencies]
Dependency=Engine
Dependency=Builder

[Files]
File=$(Project.Directory)/**

[Libraries]
Library=$(Workspace.Directory)/../ProjectFiles/Generic/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/Generic$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/Engine/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/Engine$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/XScript/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/XScript$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/libpng/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/libpng$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/zlib/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/zlib$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/FreeType/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/FreeType$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/LibGeoIP/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/LibGeoIP$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/libsquish/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/libsquish$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/cryptocpp/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/cryptocpp$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/libvorbis/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/libvorbis$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/libtheora/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/libtheora$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/libtheoraplayer/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/libtheoraplayer$(Host.StaticLibExtension)
Library=$(Workspace.Directory)/../ProjectFiles/mongoose/bin/$(Target.Configuration)_$(Target.Platform)_$(Host.Platform)/mongoose$(Host.StaticLibExtension)

if (Target.IDE==vs2015 || Target.IDE==vs2017)
{	
	Library=user32.lib
	Library=gdi32.lib
	Library=opengl32.lib
	Library=glu32.lib
	Library=Winmm.lib
	Library=dbghelp.lib
	Library=ws2_32.lib
	Library=Shell32.lib
	Library=Rpcrt4.lib
	Library=XInput.lib
	Library=dinput8.lib
	Library=dxguid.lib
	Library=Imm32.lib		
	Library=$(ZombieGrinder.SourceDirectory)\Generic\ThirdParty\FMod\Library\fmod_vc.lib
	Library=$(ZombieGrinder.SourceDirectory)\Brofiler\ProfilerCore32.lib
	Library=$(STEAMWORKS_ROOT)/public/steam/lib/win32/sdkencryptedappticket.lib
	Library=$(STEAMWORKS_ROOT)/redistributable_bin/steam_api.lib	
}
else if (Target.IDE==xcode)
{
	Library=stdc++
	Library=pthread
	Library=Framework.CoreServices
	Library=Framework.AGL
	Library=Framework.OpenGL
	Library=Framework.Carbon
	Library=Framework.AppKit
	Library=Framework.IOKit
	Library=Framework.ForceFeedback
	Library=$(ZombieGrinder.SourceDirectory)\Generic\ThirdParty\FMod\Library\libfmod.dylib
	Library=$(STEAMWORKS_ROOT)/public/steam/lib/osx32/libsdkencryptedappticket.dylib
	Library=$(STEAMWORKS_ROOT)/redistributable_bin/osx32/libsteam_api.dylib	
}
else if (Target.IDE==make)
{
	Library=stdc++
	Library=m
	Library=dl
	Library=pthread
	Library=GL
	Library=X11
	Library=Xxf86vm
	Library=uuid
	Library=$(ZombieGrinder.SourceDirectory)\Generic\ThirdParty\FMod\Library\libfmod.so	
	Library=$(STEAMWORKS_ROOT)/public/steam/lib/linux32/libsdkencryptedappticket.so
	Library=$(STEAMWORKS_ROOT)/redistributable_bin/linux32/libsteam_api.so
}

[ForcedIncludes]
ForcedInclude=$(ZombieGrinder.SourceDirectory)/Generic/Defines.h

[Packager]
if (Depot==Executable)
{
	RequiresBuild=True
}
else
{
	RequiresBuild=False
}
BuildChangelog=True
ChangelogFile=$(ZombieGrinder.RootDirectory)/Docs/changelog.txt

[PrePackageCommands]
if (Depot==Data)
{
	Command=$(ZombieGrinder.AutomationDirectory)/BuildData$(ZombieGrinder.AutomationScriptExtension)
}

[PostPackageCommands]
if (Depot==Executable)
{
}

[PackageFiles]
if (Depot==Executable)
{
	if (Target.Packager==Steamworks)
	{
		if (Host.Platform==Linux)
		{
			if (Target.Configuration==MasterDedicated)
			{
				$(ZombieGrinder.RootDirectory)/Binary/Linux32/Server=$(Target.PackageDirectory)/Binary	
			}
			else
			{
				$(ZombieGrinder.RootDirectory)/Binary/Linux32/Game=$(Target.PackageDirectory)/Binary			
				$(ZombieGrinder.RootDirectory)/Binary/Linux32/Builder=$(Target.PackageDirectory)/Binary
			}
			$(ZombieGrinder.RootDirectory)/Binary/Linux32/libfmod.so.6=$(Target.PackageDirectory)/Binary			
			$(ZombieGrinder.RootDirectory)/Binary/Linux32/steam_appid.txt=$(Target.PackageDirectory)/Binary
			
			$(STEAMWORKS_ROOT)/public/steam/lib/linux32/libsdkencryptedappticket.so=$(Target.PackageDirectory)/Binary
			$(STEAMWORKS_ROOT)/redistributable_bin/linux32/libsteam_api.so=$(Target.PackageDirectory)/Binary
		}
		else if (Host.Platform==MacOS)
		{
			if (Target.Configuration==MasterDedicated)
			{
				$(ZombieGrinder.RootDirectory)/Binary/MacOS/Server=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS
			}
			else
			{
				$(ZombieGrinder.RootDirectory)/Binary/MacOS/Game=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS
				$(ZombieGrinder.RootDirectory)/Binary/MacOS/Builder=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS
			}
			$(ZombieGrinder.RootDirectory)/Binary/MacOS/libfmod.so.6=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS
			$(ZombieGrinder.RootDirectory)/Binary/MacOS/steam_appid.txt=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS			
			$(ZombieGrinder.RootDirectory)/Binary/MacOS/ZombieGrinder.app/Contents/Resources/ZombieGrinder.icns=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/Resources
			$(ZombieGrinder.RootDirectory)/Binary/MacOS/ZombieGrinder.app/Contents/Info.plist=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents
			
			$(STEAMWORKS_ROOT)/public/steam/lib/osx32/libsdkencryptedappticket.dylib=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS
			$(STEAMWORKS_ROOT)/redistributable_bin/osx32/libsteam_api.dylib=$(Target.PackageDirectory)/Binary/ZombieGrinder.app/Contents/MacOS
		}
		else if (Host.Platform==Windows)
		{
			if (Target.Configuration==MasterDedicated)
			{
				$(ZombieGrinder.RootDirectory)/Binary/Win32/Server.exe=$(Target.PackageDirectory)/Binary
			}
			else
			{
				$(ZombieGrinder.RootDirectory)/Binary/Win32/Game.exe=$(Target.PackageDirectory)/Binary
				$(ZombieGrinder.RootDirectory)/Binary/Win32/Builder.exe=$(Target.PackageDirectory)/Binary
			}
			$(ZombieGrinder.RootDirectory)/Binary/Win32/fmod.dll=$(Target.PackageDirectory)/Binary
			$(ZombieGrinder.RootDirectory)/Binary/Win32/steam_appid.txt=$(Target.PackageDirectory)/Binary
			
			$(STEAMWORKS_ROOT)/public/steam/lib/win32/sdkencryptedappticket.dll=$(Target.PackageDirectory)/Binary
			$(STEAMWORKS_ROOT)/redistributable_bin/steam_api.dll=$(Target.PackageDirectory)/Binary
		}
	}	
}
else if (Depot==Data)
{
	$(ZombieGrinder.RootDirectory)/Docs/**=$(Target.PackageDirectory)/Docs
	$(ZombieGrinder.RootDirectory)/Data/GeoIP.dat=$(Target.PackageDirectory)/Data/GeoIP.dat
	$(ZombieGrinder.RootDirectory)/Data/Base/Base.dat=$(Target.PackageDirectory)/Data/Base
	$(ZombieGrinder.RootDirectory)/Data/Base/Base.xml=$(Target.PackageDirectory)/Data/Base
}

[Steamworks]
AppId=263920
BuildDescription=Application Update

; Pass these in through command line so we don't have to keep them in the depot.
Username=$(STEAM_USERNAME)
Password=$(STEAM_PASSWORD)

if (Depot==Executable)
{
	if (Host.Platform==Linux)
	{
		DepotId=263923
	}
	else if (Host.Platform==MacOS)
	{
		DepotId=263924
	}
	else if (Host.Platform==Windows)
	{
		DepotId=263922
	}
}
else if (Depot==Data)
{
	DepotId=263921
}

